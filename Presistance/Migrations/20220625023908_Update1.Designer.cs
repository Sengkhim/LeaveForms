// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Presistance.DataBase;

#nullable disable

namespace Presistance.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220625023908_Update1")]
    partial class Update1
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Domain.ActualLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FeedBacks")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Remaining")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ReasonCodeId");

                    b.ToTable("ActualLeaves", "ActualLeave");
                });

            modelBuilder.Entity("Domain.ActualLeaveRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActualLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActualLeaveId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("ActualLeaveRecord", "ActualLeave");
                });

            modelBuilder.Entity("Domain.AdvanceLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("FeedBacks")
                        .HasColumnType("int");

                    b.Property<DateTimeOffset>("FromDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Remaining")
                        .HasColumnType("float");

                    b.Property<DateTimeOffset>("ToDate")
                        .HasColumnType("datetimeoffset");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("ReasonCodeId");

                    b.ToTable("AdvanceLeaves", "AdvanceLeave");
                });

            modelBuilder.Entity("Domain.AdvanceLeaveRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvanceLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceLeaveId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable(" AdvanceLeaveRecord", "AdvanceLeave");
                });

            modelBuilder.Entity("Domain.Authentication.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("CreatedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ModifiedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", "db");
                });

            modelBuilder.Entity("Domain.Authentication.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "db");
                });

            modelBuilder.Entity("Domain.Authentication.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RefreshTokenExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("UserProfile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("Users", "db");

                    b.HasData(
                        new
                        {
                            Id = new Guid("434c71ce-64fe-4a71-83ea-d61cb7b1f571"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2708d6d2-9657-423a-bb75-34be3b1e2821",
                            CreatedDate = new DateTimeOffset(new DateTime(2022, 6, 25, 9, 39, 6, 216, DateTimeKind.Unspecified).AddTicks(1094), new TimeSpan(0, 7, 0, 0, 0)),
                            Email = "benz@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "BenZ",
                            LastName = "UTC",
                            LockoutEnabled = false,
                            NormalizedEmail = "BENZ@GMAIL.COM",
                            NormalizedUserName = "BENZ",
                            PasswordHash = "AQAAAAEAACcQAAAAEL9cktyP+gHmmzf9H/EDjjVr7yan9Xo8kNhEBsfAC2o4xxxuluEo71+aVTpUB7YG7Q==",
                            PhoneNumber = "012273893",
                            PhoneNumberConfirmed = true,
                            RefreshToken = "WPOJONETW3HXSDNK4LQR47BNYJSG7OFG",
                            RefreshTokenExpiryTime = new DateTime(9999, 12, 31, 23, 59, 59, 999, DateTimeKind.Unspecified).AddTicks(9999),
                            SecurityStamp = "WPOJONETW3HXSDNK4LQR47BNYJSG7OFG",
                            Status = true,
                            TwoFactorEnabled = false,
                            UserName = "BenZ"
                        });
                });

            modelBuilder.Entity("Domain.Authentication.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "db");
                });

            modelBuilder.Entity("Domain.Authentication.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CreatedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "db");
                });

            modelBuilder.Entity("Domain.Authentication.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "db");
                });

            modelBuilder.Entity("Domain.Authentication.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("CreatedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedByUser")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "db");
                });

            modelBuilder.Entity("Domain.BranchRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("BranchRecords", "Branch");
                });

            modelBuilder.Entity("Domain.CompanyDepartermentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyDepartermentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDepartermentId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("CompanyDepartermentRecords", "Company");
                });

            modelBuilder.Entity("Domain.CompanyMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("CompanyMembers", "Company");
                });

            modelBuilder.Entity("Domain.CompanyMemberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PerIodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyMemberId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PerIodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("CompanyMemberRecord", "Company");
                });

            modelBuilder.Entity("Domain.CompanyPositionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyPositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyPositionId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("CompanyPositionRecord", "Company");
                });

            modelBuilder.Entity("Domain.CompanyRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("CompanyRecords", "Company");
                });

            modelBuilder.Entity("Domain.ContactRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ContactId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ContactId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("ContactRecords", "Contact");
                });

            modelBuilder.Entity("Domain.Departerment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("Code", "Name")
                        .IsUnique();

                    b.ToTable("Departerments", "Departerment");
                });

            modelBuilder.Entity("Domain.DepartermentMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartermentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartermentId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("DepartermentMembers", "Departerment");
                });

            modelBuilder.Entity("Domain.DepartermentMemberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartermentMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartermentMemberId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("DepartermentMemberRecords", "Departerment");
                });

            modelBuilder.Entity("Domain.DepartermentRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartermentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasoncodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartermentId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasoncodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("DepartermentRecords", "Departerment");
                });

            modelBuilder.Entity("Domain.Entites.Company.Branch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Branchs", "Branch");
                });

            modelBuilder.Entity("Domain.Entites.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CommpanyType")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("DateCreated")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Logo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Companys", "Company");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDeparterment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartermentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("CompanyDeparterments", "Company");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDetail", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("CompanyDetails", "Company");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyPosition", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("CompanyPositions", "Company");
                });

            modelBuilder.Entity("Domain.Entites.Company.Contact", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Contacts")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Contacts", "Contact");
                });

            modelBuilder.Entity("Domain.Entites.Period", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("BeginDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("EndDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("Period");
                });

            modelBuilder.Entity("Domain.Entites.Postition.PositionMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double?>("Total")
                        .HasColumnType("float");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PositionId");

                    b.HasIndex("UserId");

                    b.ToTable("PositionMember");
                });

            modelBuilder.Entity("Domain.Entites.Postition.PositionMemberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionMemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasconCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PositionMemberId");

                    b.HasIndex("ReasconCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("PositionMemberRecord");
                });

            modelBuilder.Entity("Domain.Leave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Leaves", "Leave");
                });

            modelBuilder.Entity("Domain.LeaveRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LeaveId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("Leave", "LeaveRecord");
                });

            modelBuilder.Entity("Domain.LeaveType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("LeaveTypes", "Leave");
                });

            modelBuilder.Entity("Domain.LeaveTypeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("LeaveTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("LeaveTypeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("LeaveTypeRecords", "Leave");
                });

            modelBuilder.Entity("Domain.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("DepartermentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositonId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartermentId");

                    b.HasIndex("MemberId")
                        .IsUnique();

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PositonId")
                        .IsUnique();

                    b.ToTable("Members", "Member");
                });

            modelBuilder.Entity("Domain.MemberActualLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ActualLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActualLeaveId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable(" MemberActualLeave", "ActualLeave");
                });

            modelBuilder.Entity("Domain.MemberActualLeaveRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MemberActualLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberActualLeaveId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable(" MemberActualLeaveRecord", "ActualLeave");
                });

            modelBuilder.Entity("Domain.MemberAdvanceLeave", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("AdvanceLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdvanceLeaveId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable(" MemberAdvanceLeave", "AdvanceLeave");
                });

            modelBuilder.Entity("Domain.MemberAdvanceLeaveRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("MemberAdvanceLeaveId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberAdvanceLeaveId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable(" MemberAdvanceLeaveRecord", "AdvanceLeave");
                });

            modelBuilder.Entity("Domain.MemberRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("MemberRecords", "Member");
                });

            modelBuilder.Entity("Domain.MemberType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("MemberTypes", "Member");
                });

            modelBuilder.Entity("Domain.MemberTypeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<Guid>("MemberTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MemberTypeId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("MemberTypeRecords", "Member");
                });

            modelBuilder.Entity("Domain.Position", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Positions", "Position");
                });

            modelBuilder.Entity("Domain.PositionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PositionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("PositionId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("PositionRecords", "Position");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Project");
                });

            modelBuilder.Entity("Domain.ProjectRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("ProjectRecord");
                });

            modelBuilder.Entity("Domain.ReasonCode", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ReasonCodes", "ReasonCode");
                });

            modelBuilder.Entity("Domain.ReasonCodeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.ToTable("ReasonCodeRecords", "ReasonCode");
                });

            modelBuilder.Entity("Domain.RecordStatusType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique()
                        .HasFilter("[Code] IS NOT NULL");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("RecordStatusTypes", "RecordStatusType");
                });

            modelBuilder.Entity("Domain.RecordStatusTypeMember", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("RecordStatusTypeId");

                    b.HasIndex("UserId");

                    b.ToTable(" RecordStatusTypeMember", "RecordStatusType");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<Guid>("CompanyDetailId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("Code")
                        .IsUnique();

                    b.HasIndex("CompanyDetailId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Regions", "Region");
                });

            modelBuilder.Entity("Domain.RegionRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .IsUnicode(true)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("PeriodId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ReasonCodeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RecordStatusTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ReasonCodeId");

                    b.HasIndex("RecordStatusTypeId");

                    b.HasIndex("RegionId");

                    b.ToTable("RegionRecords", "Region");
                });

            modelBuilder.Entity("Domain.Working", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Working");
                });

            modelBuilder.Entity("Domain.WorkingRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("WorkingRecord");
                });

            modelBuilder.Entity("Domain.WorkingType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("WorkingType");
                });

            modelBuilder.Entity("Domain.WorkingTypeRecord", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset>("CreatedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid>("CreatedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTimeOffset?>("ModifiedDate")
                        .HasColumnType("datetimeoffset");

                    b.Property<Guid?>("ModifiedUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("WorkingTypeRecord");
                });

            modelBuilder.Entity("Domain.ActualLeave", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("LeaveType");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ReasonCode");
                });

            modelBuilder.Entity("Domain.ActualLeaveRecord", b =>
                {
                    b.HasOne("Domain.ActualLeave", "ActualLeave")
                        .WithMany("ActualLeaveRecord")
                        .HasForeignKey("ActualLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActualLeave");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.AdvanceLeave", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.LeaveType", "LeaveType")
                        .WithMany()
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("LeaveType");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ReasonCode");
                });

            modelBuilder.Entity("Domain.AdvanceLeaveRecord", b =>
                {
                    b.HasOne("Domain.AdvanceLeave", "AdvanceLeave")
                        .WithMany("AdvanceLeaveRecords")
                        .HasForeignKey("AdvanceLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvanceLeave");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Authentication.RoleClaim", b =>
                {
                    b.HasOne("Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Authentication.UserClaim", b =>
                {
                    b.HasOne("Domain.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Authentication.UserLogin", b =>
                {
                    b.HasOne("Domain.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Authentication.UserRole", b =>
                {
                    b.HasOne("Domain.Authentication.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.Authentication.UserToken", b =>
                {
                    b.HasOne("Domain.Authentication.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Domain.BranchRecord", b =>
                {
                    b.HasOne("Domain.Entites.Company.Branch", "Branch")
                        .WithMany("BranchRecord")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.CompanyDepartermentRecord", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDeparterment", "CompanyDeparterment")
                        .WithMany("CompanyDepartermentRecords")
                        .HasForeignKey("CompanyDepartermentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyDeparterment");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.CompanyMember", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("CompanyMembers")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.CompanyMemberRecord", b =>
                {
                    b.HasOne("Domain.CompanyMember", "CompanyMember")
                        .WithMany("CompanyMemberRecord")
                        .HasForeignKey("CompanyMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PerIodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyMember");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.CompanyPositionRecord", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyPosition", "CompanyPosition")
                        .WithMany("CompanyPositionRecords")
                        .HasForeignKey("CompanyPositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CompanyPosition");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.CompanyRecord", b =>
                {
                    b.HasOne("Domain.Entites.Company.Company", "Company")
                        .WithMany("CompanyRecords")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Company");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.ContactRecord", b =>
                {
                    b.HasOne("Domain.Entites.Company.Contact", "Contact")
                        .WithMany("ContactRecord")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Contact");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Departerment", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.DepartermentMember", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Departerment", "Departerment")
                        .WithMany("DepartermentMember")
                        .HasForeignKey("DepartermentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Departerment");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.DepartermentMemberRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.DepartermentMember", "DepartermentMember")
                        .WithMany("DepartermentMemberRecord")
                        .HasForeignKey("DepartermentMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("DepartermentMember");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.DepartermentRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Departerment", "Departerment")
                        .WithMany("DepartermentRecord")
                        .HasForeignKey("DepartermentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasoncodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Departerment");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Entites.Company.Branch", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("Branches")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Company.Company", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDeparterment", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("CompanyDeparterments")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDetail", b =>
                {
                    b.HasOne("Domain.Entites.Company.Company", "Company")
                        .WithMany("CompanyDetails")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("Company");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyPosition", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("CompanyPositions")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Company.Contact", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("Contacts")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.Entites.Period", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Postition.PositionMember", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Position", "Position")
                        .WithMany("PositionMember")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entites.Postition.PositionMemberRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Entites.Postition.PositionMember", "PositionMember")
                        .WithMany("PositionMemberRecord")
                        .HasForeignKey("PositionMemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasconCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("PositionMember");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Leave", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.LeaveType", "LeaveType")
                        .WithMany("Leave")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("LeaveType");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.LeaveRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Leave", "Leave")
                        .WithMany("LeaveRecord")
                        .HasForeignKey("LeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Leave");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.LeaveType", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.LeaveTypeRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.LeaveType", "LeaveType")
                        .WithMany("LeaveTypeRecord")
                        .HasForeignKey("LeaveTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("LeaveType");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Member", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Departerment", "Departerment")
                        .WithMany()
                        .HasForeignKey("DepartermentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithOne("Member")
                        .HasForeignKey("Domain.Member", "MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Position", "Position")
                        .WithOne("Member")
                        .HasForeignKey("Domain.Member", "PositonId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Departerment");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Position");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.MemberActualLeave", b =>
                {
                    b.HasOne("Domain.ActualLeave", "ActualLeave")
                        .WithMany("MemberActualLeave")
                        .HasForeignKey("ActualLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Member", null)
                        .WithMany("MemberActualLeave")
                        .HasForeignKey("MemberId");

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("ActualLeave");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.MemberActualLeaveRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.MemberActualLeave", "MemberActualLeave")
                        .WithMany("MemberActualLeaveRecords")
                        .HasForeignKey("MemberActualLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("MemberActualLeave");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.MemberAdvanceLeave", b =>
                {
                    b.HasOne("Domain.AdvanceLeave", "AdvanceLeave")
                        .WithMany("MemberAdvanceLeave")
                        .HasForeignKey("AdvanceLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Member", null)
                        .WithMany("MemberAdvanceLeave")
                        .HasForeignKey("MemberId");

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("AdvanceLeave");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.MemberAdvanceLeaveRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.MemberAdvanceLeave", "MemberAdvanceLeave")
                        .WithMany()
                        .HasForeignKey("MemberAdvanceLeaveId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("MemberAdvanceLeave");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.MemberRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Member", "Member")
                        .WithMany("MemberRecord")
                        .HasForeignKey("MemberId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("Member");

                    b.Navigation("ModifiedUser");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");

                    b.Navigation("period");
                });

            modelBuilder.Entity("Domain.MemberType", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.MemberTypeRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.MemberType", "MemberType")
                        .WithMany("MemberTypeRecord")
                        .HasForeignKey("MemberTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId");

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("MemberType");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Position", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.PositionRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Position", "Position")
                        .WithMany("PositionRecord")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("Position");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.Project", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.ProjectRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.ReasonCode", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.ReasonCodeRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany("ReasonCodeRecord")
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");
                });

            modelBuilder.Entity("Domain.RecordStatusType", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.RecordStatusTypeMember", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany("RecordStatusTypeMember")
                        .HasForeignKey("RecordStatusTypeId");

                    b.HasOne("Domain.Authentication.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("RecordStatusType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.HasOne("Domain.Entites.Company.CompanyDetail", "CompanyDetail")
                        .WithMany("Regions")
                        .HasForeignKey("CompanyDetailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CompanyDetail");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.RegionRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.HasOne("Domain.Entites.Period", "Period")
                        .WithMany()
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.ReasonCode", "ReasonCode")
                        .WithMany()
                        .HasForeignKey("ReasonCodeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.RecordStatusType", "RecordStatusType")
                        .WithMany()
                        .HasForeignKey("RecordStatusTypeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Region", "Region")
                        .WithMany("ReasonCodeRecord")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Period");

                    b.Navigation("ReasonCode");

                    b.Navigation("RecordStatusType");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Domain.Working", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.WorkingRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.WorkingType", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.WorkingTypeRecord", b =>
                {
                    b.HasOne("Domain.Authentication.User", "CreateUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Domain.Authentication.User", "ModifiedUser")
                        .WithMany()
                        .HasForeignKey("ModifiedUserId");

                    b.Navigation("CreateUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("Domain.ActualLeave", b =>
                {
                    b.Navigation("ActualLeaveRecord");

                    b.Navigation("MemberActualLeave");
                });

            modelBuilder.Entity("Domain.AdvanceLeave", b =>
                {
                    b.Navigation("AdvanceLeaveRecords");

                    b.Navigation("MemberAdvanceLeave");
                });

            modelBuilder.Entity("Domain.Authentication.User", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("Domain.CompanyMember", b =>
                {
                    b.Navigation("CompanyMemberRecord");
                });

            modelBuilder.Entity("Domain.Departerment", b =>
                {
                    b.Navigation("DepartermentMember");

                    b.Navigation("DepartermentRecord");
                });

            modelBuilder.Entity("Domain.DepartermentMember", b =>
                {
                    b.Navigation("DepartermentMemberRecord");
                });

            modelBuilder.Entity("Domain.Entites.Company.Branch", b =>
                {
                    b.Navigation("BranchRecord");
                });

            modelBuilder.Entity("Domain.Entites.Company.Company", b =>
                {
                    b.Navigation("CompanyDetails");

                    b.Navigation("CompanyRecords");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDeparterment", b =>
                {
                    b.Navigation("CompanyDepartermentRecords");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyDetail", b =>
                {
                    b.Navigation("Branches");

                    b.Navigation("CompanyDeparterments");

                    b.Navigation("CompanyMembers");

                    b.Navigation("CompanyPositions");

                    b.Navigation("Contacts");

                    b.Navigation("Regions");
                });

            modelBuilder.Entity("Domain.Entites.Company.CompanyPosition", b =>
                {
                    b.Navigation("CompanyPositionRecords");
                });

            modelBuilder.Entity("Domain.Entites.Company.Contact", b =>
                {
                    b.Navigation("ContactRecord");
                });

            modelBuilder.Entity("Domain.Entites.Postition.PositionMember", b =>
                {
                    b.Navigation("PositionMemberRecord");
                });

            modelBuilder.Entity("Domain.Leave", b =>
                {
                    b.Navigation("LeaveRecord");
                });

            modelBuilder.Entity("Domain.LeaveType", b =>
                {
                    b.Navigation("Leave");

                    b.Navigation("LeaveTypeRecord");
                });

            modelBuilder.Entity("Domain.Member", b =>
                {
                    b.Navigation("MemberActualLeave");

                    b.Navigation("MemberAdvanceLeave");

                    b.Navigation("MemberRecord");
                });

            modelBuilder.Entity("Domain.MemberActualLeave", b =>
                {
                    b.Navigation("MemberActualLeaveRecords");
                });

            modelBuilder.Entity("Domain.MemberType", b =>
                {
                    b.Navigation("MemberTypeRecord");
                });

            modelBuilder.Entity("Domain.Position", b =>
                {
                    b.Navigation("Member");

                    b.Navigation("PositionMember");

                    b.Navigation("PositionRecord");
                });

            modelBuilder.Entity("Domain.ReasonCode", b =>
                {
                    b.Navigation("ReasonCodeRecord");
                });

            modelBuilder.Entity("Domain.RecordStatusType", b =>
                {
                    b.Navigation("RecordStatusTypeMember");
                });

            modelBuilder.Entity("Domain.Region", b =>
                {
                    b.Navigation("ReasonCodeRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
